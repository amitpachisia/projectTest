{"ast":null,"code":"var _jsxFileName = \"/Users/mmt9554/Documents/React/react-app/src/ApiFetch.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ApiFetch() {\n  _s();\n  const [fetchCountry, setFetchCountry] = useState(null); // Default to null\n  const [inputValue, setInputValue] = useState('');\n  const [error, setError] = useState(''); // Initialize error as an empty string\n\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n  const getCountry = () => {\n    if (!inputValue.trim()) {\n      setError(\"Please enter a country name.\");\n      return; // Early return if input is empty\n    }\n    fetch(`https://restcountries.com/v3.1/name/${inputValue}`).then(response => {\n      if (!response.ok) {\n        setError(\"Country not found\");\n        throw new Error(\"Country not found\"); // Throw error to skip next then\n      }\n      return response.json();\n    }).then(country => {\n      setFetchCountry(country[0]);\n      setError(''); // Reset error on successful fetch\n    }).catch(() => {\n      setError(\"Country not found\");\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Country name\",\n      value: inputValue,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: getCountry,\n      children: \"Get\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dataMain\",\n      children: fetchCountry && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dataList\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 28\n          }, this), \" \", fetchCountry.name.common]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: fetchCountry.flags.png,\n          alt: \"Flag\",\n          width: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n_s(ApiFetch, \"0sywJ+ujvu3CPPtOk5H1t9jzw7s=\");\n_c = ApiFetch;\nexport default ApiFetch;\nvar _c;\n$RefreshReg$(_c, \"ApiFetch\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","ApiFetch","_s","fetchCountry","setFetchCountry","inputValue","setInputValue","error","setError","handleInputChange","e","target","value","getCountry","trim","fetch","then","response","ok","Error","json","country","catch","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","name","common","src","flags","png","alt","width","_c","$RefreshReg$"],"sources":["/Users/mmt9554/Documents/React/react-app/src/ApiFetch.js"],"sourcesContent":["import { useState } from 'react';\n\nfunction ApiFetch() {\n    const [fetchCountry, setFetchCountry] = useState(null);  // Default to null\n    const [inputValue, setInputValue] = useState('');\n    const [error, setError] = useState('');  // Initialize error as an empty string\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    };\n\n    const getCountry = () => {\n        if (!inputValue.trim()) {\n            setError(\"Please enter a country name.\");\n            return;  // Early return if input is empty\n        }\n\n        fetch(`https://restcountries.com/v3.1/name/${inputValue}`)\n            .then((response) => {\n                if (!response.ok) {\n                    setError(\"Country not found\");\n                    throw new Error(\"Country not found\"); // Throw error to skip next then\n                }\n                return response.json();\n            })\n            .then((country) => {\n                setFetchCountry(country[0]);\n                setError('');  // Reset error on successful fetch\n            })\n            .catch(() => {\n                setError(\"Country not found\");\n            });\n    };\n\n    return (\n        <div>\n            <input\n                type=\"text\"\n                placeholder=\"Country name\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n            <button type=\"button\" onClick={getCountry}>\n                Get\n            </button>\n            \n            {/* Display error message */}\n            {error && <p>{error}</p>}\n\n            <div className=\"dataMain\">\n                {fetchCountry && (\n                    <div className=\"dataList\">\n                        <p><strong>Name:</strong> {fetchCountry.name.common}</p>\n                        {/* <p><strong>Languages:</strong> {fetchCountry.languages ? Object.values(fetchCountry.languages).join(', ') : 'N/A'}</p> */}\n                        <img src={fetchCountry.flags.png} alt=\"Flag\" width=\"100\" />\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default ApiFetch;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}